# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
networks:
  kafka_network:
    name: kafka_network
    driver: bridge

volumes:
  Kafka01:
    driver: local
    name: Kafka01
  Kafka02:
    driver: local
    name: Kafka02
  Kafka03:
    driver: local
    name: Kafka03

services:
  kafka-1:
    image: docker.io/bitnami/kafka:3.8
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - 29092:9092
    networks:
      - kafka_network
    volumes:
      - "Kafka01:/bitnami/kafka"
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true  # Kafka가 자동으로 토픽을 생성하도록 설정합니다.
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"  # Kafka 브로커의 힙 메모리 크기를 최소 1GB, 최대 1GB로 설정합니다.
      # KRaft settings
      KAFKA_CFG_BROKER_ID: 1  # 브로커 ID를 1로 설정합니다. 각 브로커는 고유한 ID를 가져야 합니다.
      KAFKA_CFG_NODE_ID: 1  # 노드 ID를 1로 설정합니다. KRaft 모드에서는 각 노드가 고유한 ID를 가집니다.
      KAFKA_KRAFT_CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'  # KRaft 클러스터의 ID를 설정합니다.
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'  # 컨트롤러 투표자(Quorum Voters)를 지정합니다. 각 항목은 노드 ID와 호스트 및 포트를 포함합니다.
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'  # 이 노드가 브로커와 컨트롤러 역할을 모두 수행하도록 설정합니다.
      # Listeners
      ALLOW_PLAINTEXT_LISTENER: yes  # PLAINTEXT 리스너(암호화되지 않은 통신)를 허용하도록 설정합니다.
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092'  # Kafka가 수신할 리스너들을 설정합니다. 각 리스너는 IP 주소와 포트를 포함합니다.
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://43.202.1.52:29092  # Kafka 클라이언트에게 광고될 리스너 주소를 설정합니다. 외부에서 접근할 수 있는 호스트 및 포트를 지정합니다.
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'  # 각 리스너의 보안 프로토콜을 지정합니다.
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'  # 컨트롤러 역할을 하는 리스너의 이름을 지정합니다.
      KAFKA_CLIENT_LISTENER_NAME: 'PLAINTEXT'  # 클라이언트가 사용할 리스너 이름을 지정합니다.
      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3  # 오프셋 토픽의 복제 계수를 3으로 설정합니다. 즉, 데이터의 안정성을 위해 3개의 복제본을 유지합니다.
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1  # 트랜잭션 로그의 복제 계수를 1로 설정합니다.
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1  # 트랜잭션 로그의 최소 ISR(In-Sync Replicas) 수를 1로 설정합니다.
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 2  # 컨슈머 그룹이 초기 리밸런싱을 시작하기 전의 지연 시간을 밀리초 단위로 설정합니다.
      KAFKA_LOG_DIR: '/tmp/kraft-combined-logs'  # Kafka 로그 파일이 저장될 디렉토리를 지정합니다.
  kafka-2:
    image: docker.io/bitnami/kafka:3.8
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - 39092:9092
    networks:
      - kafka_network
    volumes:
      - "Kafka02:/bitnami/kafka"
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G" # 카프카 브로커 힙 메모리 설정
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_CLIENT_LISTENER_NAME	: 'PLAINTEXT'
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://43.202.1.52:39092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_KRAFT_CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      ALLOW_PLAINTEXT_LISTENER: yes

      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 2
      KAFKA_LOG_DIR: '/tmp/kraft-combined-logs'

  kafka-3:
    image: docker.io/bitnami/kafka:3.8
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - 49092:9092
    networks:
      - kafka_network
    volumes:
      - "Kafka03:/bitnami/kafka"
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G" # 카프카 브로커 힙 메모리 설정
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_CLIENT_LISTENER_NAME	: 'PLAINTEXT'
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://43.202.1.52:49092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_KRAFT_CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      ALLOW_PLAINTEXT_LISTENER: yes

      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 2
      KAFKA_LOG_DIR: '/tmp/kraft-combined-logs'

# 카프카를 모니터링 해주는 서비스.
  KafkaWebUiService:
    image: provectuslabs/kafka-ui:latest  # KafkaWebUiService에 사용할 Docker 이미지를 지정합니다. 여기서는 최신 버전의 Provectus Kafka UI 이미지를 사용합니다.
    restart: unless-stopped  # 컨테이너가 중지되거나 문제가 발생한 경우 자동으로 재시작되도록 설정합니다. 사용자가 명시적으로 중지하지 않는 한 계속 재시작됩니다.
    container_name: KafkaWebUiContainer  # Docker 컨테이너의 이름을 지정합니다. 이를 통해 컨테이너를 쉽게 식별할 수 있습니다.
    ports:
      - '19000:8080'  # 호스트 머신의 포트 19000을 컨테이너 내의 포트 8080으로 포워딩합니다. 브라우저에서 호스트의 포트 19000으로 접속하면 Kafka UI에 접근할 수 있습니다.
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster  # 연결할 Kafka 클러스터의 이름을 지정합니다. 이 이름은 Kafka UI 내에서 클러스터를 식별하는 데 사용됩니다.
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:29092,kafka-2:39092,kafka-3:49092  # Kafka 클러스터의 브로커 주소를 지정합니다. 각 브로커의 호스트명과 포트를 콤마로 구분하여 나열합니다.
      - DYNAMIC_CONFIG_ENABLED=true  # 동적 구성 변경을 활성화합니다. 이를 통해 실행 중인 Kafka 클러스터의 설정을 실시간으로 변경할 수 있습니다.
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true  # 토픽 감사(auditing) 기능을 활성화합니다. 이를 통해 Kafka 클러스터에서 수행된 토픽 관련 작업들을 추적할 수 있습니다.
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true  # 콘솔에서의 감사(auditing) 로그 출력을 활성화합니다. 이를 통해 감사 로그를 콘솔에 출력할 수 있습니다.
      - KAFKA_CLUSTERS_0_METRICS_PORT=9999  # 주석 처리된 부분으로, 필요 시 Kafka 메트릭 서버의 포트를 지정할 수 있습니다.
    networks:
      - kafka_network  # KafkaWebUiService가 연결될 Docker 네트워크를 지정합니다. 여기서는 kafka_network라는 사용자 정의 브리지 네트워크를 사용합니다.

